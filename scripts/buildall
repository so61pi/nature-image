#!/usr/bin/env python3

from collections import namedtuple
from collections import OrderedDict
import argparse
import datetime
import fileinput
import os
import shutil
import subprocess
import sys

import util


ImageBuildInfo = namedtuple('ImageBuildInfo', 'image buildtarget artifacts decorator')

image_build_info_dict = OrderedDict()
image_build_info_dict['cetacean-image'] = \
ImageBuildInfo(image='cetacean-image', buildtarget=['cetacean-firmware'],
               artifacts=[os.path.join('build','build-cetacean-image','tmp','deploy','images','qemux86-64','cetacean-firmware-qemux86-64.swu'),
                          os.path.join('build','build-cetacean-image','tmp','deploy','images','qemux86-64','cetacean-image-qemux86-64.wic.vdi'),
                          os.path.join('build','build-cetacean-image','tmp','deploy','images','qemux86-64','cetacean-image-qemux86-64.wic.qcow2')],
               decorator='                                                                   \n'
                         ' ██████╗███████╗████████╗ █████╗  ██████╗███████╗ █████╗ ███╗   ██╗\n'
                         '██╔════╝██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔════╝██╔══██╗████╗  ██║\n'
                         '██║     █████╗     ██║   ███████║██║     █████╗  ███████║██╔██╗ ██║\n'
                         '██║     ██╔══╝     ██║   ██╔══██║██║     ██╔══╝  ██╔══██║██║╚██╗██║\n'
                         '╚██████╗███████╗   ██║   ██║  ██║╚██████╗███████╗██║  ██║██║ ╚████║\n'
                         ' ╚═════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝\n'
                         '-------------------------------------------------------------------\n'
                         'cetaceancetaceancetaceancetaceancetaceancetaceancetaceancetaceancet\n'
                         '-------------------------------------------------------------------\n')

image_build_info_dict['rodent-image'] = \
ImageBuildInfo(image='rodent-image', buildtarget=['rodent-flasher-image'],
               artifacts=[os.path.join('build', 'build-rodent-image', 'tmp', 'deploy', 'images', 'beaglebone', 'rodent-firmware-beaglebone.swu'),
                          os.path.join('build', 'build-rodent-image', 'tmp', 'deploy', 'images', 'beaglebone', 'flasher', 'rodent-flasher-image-beaglebone.wic')],
               decorator='                                                    \n'
                         '██████╗  ██████╗ ██████╗ ███████╗███╗   ██╗████████╗\n'
                         '██╔══██╗██╔═══██╗██╔══██╗██╔════╝████╗  ██║╚══██╔══╝\n'
                         '██████╔╝██║   ██║██║  ██║█████╗  ██╔██╗ ██║   ██║   \n'
                         '██╔══██╗██║   ██║██║  ██║██╔══╝  ██║╚██╗██║   ██║   \n'
                         '██║  ██║╚██████╔╝██████╔╝███████╗██║ ╚████║   ██║   \n'
                         '╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝   ╚═╝   \n'
                         '----------------------------------------------------\n'
                         'rodentrodentrodentrodentrodentrodentrodentrodentrode\n'
                         '----------------------------------------------------\n')

image_build_info_dict['lizard-image'] = \
ImageBuildInfo(image='lizard-image', buildtarget=['lizard-firmware'],
               artifacts=[os.path.join('build', 'build-lizard-image', 'tmp', 'deploy', 'images', 'cubieboard2', 'lizard-firmware-cubieboard2.swu'),
                          os.path.join('build', 'build-lizard-image', 'tmp', 'deploy', 'images', 'cubieboard2', 'lizard-image-cubieboard2.wic')],
               decorator='                                           \n'
                         '██╗     ██╗███████╗ █████╗ ██████╗ ██████╗ \n'
                         '██║     ██║╚══███╔╝██╔══██╗██╔══██╗██╔══██╗\n'
                         '██║     ██║  ███╔╝ ███████║██████╔╝██║  ██║\n'
                         '██║     ██║ ███╔╝  ██╔══██║██╔══██╗██║  ██║\n'
                         '███████╗██║███████╗██║  ██║██║  ██║██████╔╝\n'
                         '╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ \n'
                         '-------------------------------------------\n'
                         'lizardlizardlizardlizardlizardlizardlizardl\n'
                         '-------------------------------------------\n')

image_build_info_dict['mushroom-image'] = \
ImageBuildInfo(image='mushroom-image', buildtarget=['mushroom-firmware'],
               artifacts=[os.path.join('build', 'build-mushroom-image', 'tmp', 'deploy', 'images', 'raspberrypi3', 'mushroom-firmware-raspberrypi3.swu'),
                          os.path.join('build', 'build-mushroom-image', 'tmp', 'deploy', 'images', 'raspberrypi3', 'mushroom-image-raspberrypi3.wic')],
               decorator='                                                                         \n'
                         '███╗   ███╗██╗   ██╗███████╗██╗  ██╗██████╗  ██████╗  ██████╗ ███╗   ███╗\n'
                         '████╗ ████║██║   ██║██╔════╝██║  ██║██╔══██╗██╔═══██╗██╔═══██╗████╗ ████║\n'
                         '██╔████╔██║██║   ██║███████╗███████║██████╔╝██║   ██║██║   ██║██╔████╔██║\n'
                         '██║╚██╔╝██║██║   ██║╚════██║██╔══██║██╔══██╗██║   ██║██║   ██║██║╚██╔╝██║\n'
                         '██║ ╚═╝ ██║╚██████╔╝███████║██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚═╝ ██║\n'
                         '╚═╝     ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝     ╚═╝\n'
                         '-------------------------------------------------------------------------\n'
                         'mushroommushroommushroommushroommushroommushroommushroommushroommushroomm\n'
                         '-------------------------------------------------------------------------\n')


class Paths():
    @staticmethod
    def OEROOT(prjroot):
        return os.path.join(prjroot, 'meta-oe-core', 'openembedded-core')

    @staticmethod
    def BDIR(prjroot, image):
        return os.path.join(prjroot, 'build', 'build-{}'.format(image))

    @staticmethod
    def OEINIT(prjroot):
        return os.path.join(prjroot, 'meta-oe-core', 'openembedded-core', 'oe-init-build-env')


def setup_build(prjroot, image_build_info):
    # build/build-xxx-image/
    # conf/
    # meta-image/meta-xxx-image/imgconf/
    imgbuilddir = os.path.join(prjroot, 'build', 'build-{}'.format(image_build_info.image))
    cfgdir = os.path.join(prjroot, 'conf')
    imgcfgdir = os.path.join(prjroot, 'meta-image', 'meta-{}'.format(image_build_info.image), 'imgconf')

    # build/build-xxx-image/conf/
    os.makedirs(os.path.join(imgbuilddir, 'conf'), mode=0o755, exist_ok=True)

    # build/build-xxx-image/conf/bblayers.conf = conf/common.bblayers.conf + meta-image/meta-xxx-image/imgconf/bblayers.conf
    with open(os.path.join(imgbuilddir, 'conf', 'bblayers.conf'), 'w+') as fout, \
         fileinput.input([os.path.join(cfgdir, 'common.bblayers.conf'), os.path.join(imgcfgdir, 'bblayers.conf')]) as fin:
        for line in fin:
            fout.write(line)

    # build/build-xxx-image/conf/local.conf = conf/common.local.conf + meta-image/meta-xxx-image/imgconf/local.conf
    with open(os.path.join(imgbuilddir, 'conf', 'local.conf'), 'w+') as fout, \
         fileinput.input([os.path.join(cfgdir, 'common.local.conf'), os.path.join(imgcfgdir, 'local.conf')]) as fin:
        for line in fin:
            fout.write(line)

    # build/build-xxx-image/conf/templateconf.cfg
    open(os.path.join(imgbuilddir, 'conf', 'templateconf.cfg'), 'a').close()

    # meta-oe-core/openembedded-core/bitbake -> meta-oe-core/bitbake
    subprocess.run(['ln', '-sfr', '--no-dereference', os.path.join(prjroot, 'meta-oe-core', 'bitbake'), os.path.join(prjroot, 'meta-oe-core', 'openembedded-core', 'bitbake')], check=True)


def build_image(prjroot, image_build_info):
    cmd = '. {} && bitbake {}'.format(os.path.join(prjroot, 'meta-oe-core', 'openembedded-core', 'oe-init-build-env'),
                                      ' '.join(image_build_info.buildtarget))
    subprocess.run(cmd, check=True, shell=True, env=dict(os.environ, OEROOT=Paths.OEROOT(prjroot), BDIR=Paths.BDIR(prjroot, image_build_info.image)))


def copy_artifacts(prjroot, image_build_info, artifacts_dir):
    if not os.path.isdir(artifacts_dir):
        raise ValueError('artifacts_dir must be a directory')

    for file in image_build_info.artifacts:
        shutil.copy2(os.path.join(prjroot, file), artifacts_dir)


def prepare_artifacts_dir(prjroot):
    timestamp = datetime.datetime.now().strftime('%F.%H-%M-%S')
    ba = os.path.join(prjroot, 'build-artifacts')
    new_artifacts_dir = os.path.join(ba, timestamp)
    os.makedirs(new_artifacts_dir, mode=0o755, exist_ok=True)
    subprocess.run(['ln', '-sfr', '--no-dereference', new_artifacts_dir, os.path.join(ba, '_latest')], check=True)
    return new_artifacts_dir


def buildall(prjroot, image_build_info_dict):
    artifacts_dir = prepare_artifacts_dir(prjroot)
    errors = []
    for key, image_build_info in image_build_info_dict.items():
        try:
            print(image_build_info.decorator, flush=True)
            setup_build(prjroot, image_build_info)
            build_image(prjroot, image_build_info)
            copy_artifacts(prjroot, image_build_info, artifacts_dir)
        except Exception as e:
            errors.append(e)
    if errors:
        raise Exception(errors)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--image', help='specify image',
                        action='append')
    parser.add_argument('--setup', help='setup build',
                        action='store_true')
    parser.add_argument('--get', help='get PRJROOT, OEROOT, OEINIT or BDIR')
    args = parser.parse_args()

    if args.image:
        args.image = list(OrderedDict.fromkeys(args.image))

    if args.get:
        if args.get == 'PRJROOT':
            print(util.prjroot())
            sys.exit()
        elif args.get == 'OEROOT':
            print(Paths.OEROOT(util.prjroot()))
            sys.exit()
        elif args.get == 'OEINIT':
            print(Paths.OEINIT(util.prjroot()))
            sys.exit()
        elif args.get == 'BDIR':
            if not args.image:
                sys.exit('--get=BDIR must be used with --image')
            if len(args.image) > 1:
                sys.exit('--get=BDIR accepts only 1 image')
            print(Paths.BDIR(util.prjroot(), args.image[0]))
            sys.exit()
        else:
            sys.exit('invalid value for --get')

    if args.setup:
        if not args.image:
            sys.exit('--setup must be used with --image')
        setup_dict = OrderedDict()
        for image in args.image:
            if image not in image_build_info_dict:
                sys.exit(image + ' is NOT a valid image')
            setup_dict[image] = image_build_info_dict[image]
        for key, image_build_info in setup_dict.items():
            setup_build(util.prjroot(), image_build_info)
        sys.exit()

    if args.image:
        build_dict = OrderedDict()
        for image in args.image:
            if image not in image_build_info_dict:
                sys.exit(image + ' is NOT a valid image')
            build_dict[image] = image_build_info_dict[image]
        buildall(util.prjroot(), build_dict)
    else:
        buildall(util.prjroot(), image_build_info_dict)
